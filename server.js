// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
app.post('/api/save-score', (req, res) => {
  try {
    const { userId, username, score, streak, multiplier, sessionScore } = req.body;
    
    if (!userId || score === undefined) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    console.log('üíæ Saving score:', { userId, username, score, sessionScore });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingScore = scores.find(s => s.userId === userId);
    
    if (existingScore) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      existingScore.score = score; // —ç—Ç–æ —É–∂–µ –æ–±—â–∞—è —Å—É–º–º–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      existingScore.streak = Math.max(existingScore.streak, streak);
      existingScore.multiplier = Math.max(existingScore.multiplier, multiplier);
      existingScore.timestamp = new Date().toISOString();
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      scores.push({
        userId,
        username: username || '–ê–Ω–æ–Ω–∏–º', 
        score: score,
        streak: streak,
        multiplier: multiplier,
        timestamp: new Date().toISOString()
      });
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (scores.length > 1000) {
      scores = scores.slice(-500);
    }
    
    res.json({ 
      success: true, 
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
      totalScores: scores.length 
    });
    
  } catch (error) {
    console.error('‚ùå Error saving score:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});
